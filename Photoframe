#!/bin/python3
import io
import sys
import email
from imapclient import IMAPClient
import os
from datetime import datetime
from PIL import Image
import pygame
from pygame.locals import FULLSCREEN
import tkinter as tk
from tkinter import messagebox
import logging
from email.utils import parseaddr
import subprocess
import time
from datetime import datetime, time as dt_time
import configparser
import cv2
import signal
import sqlite3
import shutil
import qrcode
import threading

# create log messages to journal via stderr
sys.stdout = sys.stderr
print("Started PhotoFrame Live")

#make sure the necessary directories and files are defined
cache_path = "image_cache"
os.makedirs(cache_path, exist_ok=True)
config_path = "photoframe.cfg"
sqlite_db = "image_cache.db"
pause_event = threading.Event()
#Create SQLite database
conn = sqlite3.connect(sqlite_db)
c = conn.cursor()
try:
    c.execute('''
        CREATE TABLE IF NOT EXISTS cache (
            email_id TEXT,
            image_index INTEGER,
            image_path TEXT,
            PRIMARY KEY (email_id, image_index)
            )
    ''')
    conn.commit()
    c.execute('''
        CREATE TABLE IF NOT EXISTS email (
            email_id TEXT,
            total_images INTEGER,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (email_id)
            )
    ''')
    conn.commit()

except sqlite3.Error as e:
    print(f"{e}")

# Read Config file and set variables
config = configparser.ConfigParser(comment_prefixes=['#', ';'])
read_config = config.read(config_path)
if not read_config:
    print(f"Failed to read the config file at {config_path}.  Did you forget to create it?")
    exit(1)
try:
    EMAIL = config['EMAIL']['login']
    PASSWORD = config['EMAIL']['password']
    SERVER = config['EMAIL']['server']
    FOLDER = config['EMAIL']['folder']
    PASSWORD_SUBJECT = config['EMAIL']['subject_pw'].lower()
    DELAY = int(config['SCREEN']['delay'].strip()) * 10
    SLEEP = config['SCREEN']['sleep']
    AWAKE = config['SCREEN']['awake']
    screen_width = int(config['SCREEN']['width'].strip())
    screen_height = int(config['SCREEN']['height'].strip())
except KeyError as e:
    key = e.args[0]
    print(f"Failed to find '{e.args[0]}' value in {config_path} config file")
    raise

# Define functions
def generate_qrcode ():
    try:
        qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=5, border=2)
        qr.add_data(f"mailto:{EMAIL}?subject={PASSWORD_SUBJECT}")
        qr.make(fit=True)
        img_qr = qr.make_image(fill='black', back_color='white')
        byte_io = io.BytesIO()
        img_qr.save(byte_io, format="PNG")
        byte_io.seek(0)
        qr_code = pygame.image.load(byte_io)
        qr_size = qr_code.get_size()
        qr_position = (screen_width - qr_size[0] - 15, screen_height - qr_size[1] - 15)
        return (qr_code, qr_position)
    except Exception as e:
        print(f"An error occured: {e}")

def signal_handler(sig, frame):
    print('SIGTERM received.  Exiting')
    mail.logout()
    conn.close()
    sys.exit(0)

signal.signal(signal.SIGTERM, signal_handler)

def parse_time(time_str):
    try:
        hours, minutes = map(int, time_str.split(':'))
        return dt_time(hours, minutes)
    except ValueError:
        raise ValueError("Invalid time format. Please use HH:MM format.")

def check_cache(msgid, index, messages, c):
    c.execute('SELECT email_id FROM email')
    cached_ids = [row[0] for row in c.fetchall()]
    server_ids = [str(msg) for msg in messages]
    for email_id in cached_ids:
        if email_id not in server_ids:   #email has been removed
            c.execute('SELECT image_path FROM cache WHERE email_id = ?', (email_id,))
            image_paths = c.fetchall()
            if isinstance(image_paths, list):
                for path in image_paths:
                    os.remove(path[0])  # Delete image file
                c.execute('DELETE FROM cache WHERE email_id = ?', (email_id,))  # Delete cache entry
                c.execute('DELETE FROM email WHERE email_id = ?', (email_id,))
                conn.commit()

    c.execute('SELECT total_images FROM email WHERE email_id = ?', (msgid,))
    total_images = c.fetchone()
    if total_images:
        total_images = total_images[0]
    c.execute('SELECT COUNT(*) FROM cache WHERE email_id = ?', (msgid,))
    cache_count = c.fetchone()[0]
    if cache_count == total_images:   # We have all the images
        c.execute('SELECT image_path FROM cache WHERE email_id = ?', (msgid,))
        paths = c.fetchall()
        for i, (image_path,) in enumerate(paths):
            if not os.path.isfile(image_path):
                total_images -= 1
                c.execute('DELETE FROM cache WHERE image_path = ?', (image_path))
                if total_images == 0:
                    c.execute('DELETE FROM email WHERE email_id = ?', (msgid,))
                    client.move(email_id, 'Stored')
                else:
                    c.execute('UPDATE email SET total_images = ? WHERE email_id = ?', (total_images, msgid))
                conn.commit()
        c.execute('SELECT image_path FROM cache WHERE email_id = ?', (msgid,))
        paths = c.fetchall()
        if paths:
            return (paths)
        else:
            return None

def add_to_cache(email_id, c, index, image_path):
    total, used, free = shutil.disk_usage("/image_cache/")
    print(f'{total} Total space, {used} used, {free} free')
    min_free = total // 10
    c.execute('INSERT OR REPLACE INTO cache (email_id, image_index, image_path) VALUES (?, ?, ?)', (email_id, index, image_path))
    c.execute('INSERT OR REPLACE INTO email (email_id, total_images) VALUES (?, ?)', (email_id, index))
    conn.commit()
    if free < min_free:
        c.execute('SELECT email_id FROM email ORDER BY timestamp LIMIT 1')
        rows = c.fetchone()
        oldest_email_id = rows[0]
        c.execute('SELECT image_path FROM cache WHERE email_id = ?', (oldest_email_id,))
        image_paths = c.fetchall()
        for path in image_paths:
            os.remove(path[0])
            c.execute('DELETE FROM cache WHERE email_id = ? AND image_path = ?', (oldest_email_id, path[0]))
        c.execute('DELETE FROM email WHERE email_id = ?', (oldest_email_id,))
        conn.commit()

def generate_unique_filename_and_download(part, email_id, index, sender, sender_name, msg_date, msg_time):
    file_name = part.get_filename().lower()
    timestamp = datetime.now().strftime('%Y%m%d%H%M%S%f')
    base_name, extension = os.path.splitext(file_name)
    unique_file_path = os.path.join(cache_path, f'{base_name}_{timestamp}{extension}')
    with open(unique_file_path, 'wb') as f:
        f.write(part.get_payload(decode=True))
    if file_name.endswith('.heic'):
        heif_file = pyheif.read(unique_file_path)
        image = Image.frombytes(
            heif_file.mode,
            heif_file.size,
            heif_file.data,
            "raw",
            heif_file.mode,
            heif_file.stride,
        )
        unique_file_path = unique_file_path.replace('.heic', '.png')
        image.save(unique_file_path)
    command = [
        'convert',
        unique_file_path,
        '-resize', f'{screen_width}x{screen_height}',
        '-gravity', 'center', '-background', 'black',
        '-extent', f'{screen_width}x{screen_height}',
        '-gravity', 'SouthWest',
        '-pointsize', '20',
        '-fill', 'white',
        '-annotate', '+5+10', f'Sent by: {sender_name} via {sender} on {msg_date} at {msg_time}',
        unique_file_path]
    subprocess.run(command)
    add_to_cache(email_id, c, index, unique_file_path)
    return unique_file_path

def display_image(img_path):
    screen.fill((0, 0, 0))
    img = pygame.image.load(img_path)
    screen.blit(img, (0,0))
    pygame.display.flip()
    if img_path ==  "photoframe_splash.png":
        time.sleep(1)
        return
    for _ in range(DELAY):
        for event in pygame.event.get():
            if event.type == pygame.FINGERDOWN:
                action_dict = {1: 'Message deleted', 2: 'Message Archived', 3: 'Continuing...', 4: 'Displaying QRCode'}
                action = dialog_box(msgid,img_path)
                return
        time.sleep(0.1)

def dialog_box(msgid, img_path):
    def on_delete():
        root.destroy()
        client.move(msgid, '[Gmail]/Trash')
        screen.fill((0, 0, 0))
        pygame.display.flip()
        c.execute('SELECT image_path FROM cache WHERE email_id = ?', (msgid,))
        rows = c.fetchall()
        for row in rows:
            os.remove(row[0])
        c.execute('DELETE FROM cache WHERE email_id = ?', (msgid,))
        c.execute('DELETE FROM email WHERE email_id = ?', (msgid,))
        conn.commit()
        result.set(1)

    def on_archive():
        root.destroy()
        dim_surface = pygame.Surface(screen.get_size()).convert_alpha()
        dim_surface.fill((0 ,0 ,0 , 128))
        screen.blit(dim_surface, (0, 0))
        pygame.display.flip()
        os.remove(img_path)
        c.execute('SELECT total_images FROM email WHERE email_id = ?', (msgid,))
        total_images = c.fetchone()[0]
        total_images -= 1
        c.execute('DELETE FROM cache WHERE email_id = ? AND image_index = ?', (msgid, current_image_index))
        if total_images == 0:
            c.execute('DELETE FROM email WHERE email_id = ?', (msgid,))
            client.move(msgid, 'Stored')
        else:
            c.execute('UPDATE email SET total_images = ? WHERE email_id = ?', (total_images, msgid))
        conn.commit()
        result.set(2)

    def on_continue():
        root.destroy()
        pygame.display.flip()
        result.set(3)

    def on_qrcode():
        root.destroy()
        qr_code, qr_position =  generate_qrcode()
        screen.blit(qr_code, qr_position)
        pygame.display.flip()
        time.sleep(15)
        result.set(4)

    root = tk.Tk()
    result = tk.IntVar()
    root.geometry("700x50+290+325")
    root.title("Please select an option")
    button_font = ("Helvetica", 14)
    button_width = 15
    button_height = 2
    delete_button = tk.Button(root, text="Delete", command=on_delete, font=button_font, width=button_width, height=button_height)
    archive_button = tk.Button(root, text="Archive", command=on_archive, font=button_font, width=button_width, height=button_height)
    continue_button = tk.Button(root, text="Continue", command=on_continue, font=button_font, width=button_width, height=button_height)
    qrcode_button = tk.Button(root, text="QR Code", command=on_qrcode, font=button_font, width=button_width, height=button_height)
    delete_button.grid(row=0, column=0)
    archive_button.grid(row=0, column=1)
    continue_button.grid(row=0, column=2)
    qrcode_button.grid(row=0, column=3)
    root.mainloop()
    exitcode = result.get()
    return exitcode

def play_movie(movie_path):
    cap = cv2.VideoCapture(movie_path)
    roi_window = cv2.namedWindow('VideoPlayer', cv2.WINDOW_NORMAL)
    cv2.setWindowProperty('VideoPlayer', cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)
    while(cap.isOpened()):
       ret, frame = cap.read()
       if not ret:
           break
       cv2.imshow('VideoPlayer', frame)
       for event in pygame.event.get():
           if event.type == pygame.FINGERDOWN:
               break
       else:
           continue
    cap.release()
    cv2.destroyAllWindows()

def screen_sleep(state):
    subprocess.run(['xset', 'dpms', 'force', state])
    return check_screen_state()

def check_screen_state():
    output = subprocess.check_output(['xset', 'q']).decode('utf-8')
    for line in output.split('\n'):
        if 'Monitor is' in line:
            return line.split(' ')[-1].lower()

def sleep_time(stop_time, start_time):
    now_time = datetime.now().time()
    if stop_time < start_time:
       start_time, stop_time = stop_time, start_time
    if start_time <= now_time <= stop_time:
       return False
    return True

def splash_screen():
    qr_code, qr_position =  generate_qrcode()
    display_image("photoframe_splash.png")
    screen_state = screen_sleep("on")
    screen.blit(qr_code, qr_position)
    pygame.display.flip()
    time.sleep(10)

def walk_message(client, msgid, current_image_index, messages, c):
    cache_result = check_cache(msgid, current_image_index, messages, c)
    if cache_result:
        for image_path in cache_result:
            if image_path[0].endswith('.mp4') or image_path[0].endswith('.mov'):
                play_movie(image_path[0])
            else:
                display_image(image_path[0])
    else:
        response = client.fetch(msgid, ['BODY.PEEK[]'])
        raw_email = response[msgid][b'BODY[]']
        email_message = email.message_from_bytes(raw_email)
        subject = email_message['subject'].lower()
        if PASSWORD_SUBJECT and PASSWORD_SUBJECT not in subject:
            client.move(msgid, 'password reject')
            return
        sender = parseaddr(email_message['From'])[1]
        sender_name = parseaddr(email_message['From'])[0]
        date_header = email_message['Date']
        if date_header:
            date_tuple = email.utils.parsedate_tz(date_header)
            if date_tuple:
                local_date = datetime.fromtimestamp(email.utils.mktime_tz(date_tuple))
                msg_date = local_date.strftime("%m/%d/%Y")
                msg_time = local_date.strftime("%H:%M")
        for part in email_message.walk():
            if part.get('Content-Disposition') is None or part.get('Content-Disposition').lower().startswith('inline'):
               continue
            file_name = part.get_filename().lower()
            if file_name.endswith('.jpg') or file_name.endswith('.png') or file_name.endswith('.gif') or file_name.endswith('.heic'):
                current_image_index += 1
                image_path = generate_unique_filename_and_download(part, msgid, current_image_index, sender, sender_name, msg_date, msg_time)
                display_image(image_path)
            elif file_name.endswith('.mp4') or file_name.endswith('.mov'):
                current_image_index +=1
                image_path = generate_unique_filename_and_download(part, msgid, current_image_index)
                play_movie(image_path)

def Connect_IMAP():
    while True:
            try:
                client = IMAPClient(SERVER)
                client.login(EMAIL, PASSWORD)
                select_info = client.select_folder(FOLDER)
                folders = client.list_folders(directory='', pattern='*')
                return(client)
            except Exception as e:
                print(f"Failed to connect to the IMAP server, retrying: {e}")
                time.sleep(10)

def Check_IMAP(client):
    try:
        client.noop()
        return True
    except:
        return False

def GetMessages(client):
    global messages
    while True:
        try:
            messages = client.search('ALL')
            client.set_flags(messages, '\\Seen', silent=True)
            return messages
        except Exception as e:
            print(f"Unexpected error while getting messages: {e}")
            time.sleep(60)

def PollNewMessages(client):
    global messages
    while True:
        try:
            pause_event.wait()
            time.sleep(600)
            new_messages = client.search('UNSEEN')
            messages += new_messages
            client.set_flags(new_messages, '\\Seen', silent=True)
        except Exception as e:
            print(f"Unexpected error while polling for new messages: {e}")
            time.sleep(60)

def SleepOrWake(client, screen_State):
    if SLEEP and AWAKE:
        SLEEP_TIME = parse_time(SLEEP)
        AWAKE_TIME = parse_time(AWAKE)
        screen_state = check_screen_state()
        while sleep_time(SLEEP_TIME, AWAKE_TIME):
            if Check_IMAP(client):
                client.logout()
            print(f"Current: {datetime.now().time()}  Sleep: {SLEEP_TIME}  Awake: {AWAKE_TIME}")
            while screen_state == "on":
                print(f"Going to sleep until {AWAKE_TIME}")
                screen_state = screen_sleep("off")
                pause_event.clear()
            now = datetime.datetime.now()
            awake = datetime.datetime.combine(now.date(), AWAKE_TIME)
            if now > awake:
                awake += datetime.timedelta(days=1)
            sleep_seconds = (awake - now).total_seconds() + 60
            time.sleep(sleep_seconds)
        else:
            while screen_state == "off":
                print("Waking up")
                splash_screen()
                screen_state = screen_sleep("on")
                client = Connect_IMAP()
                pause_event.set()
    else:
        while screen_state == "off":
            screen_state = screen_sleep("on")

pygame.init()
screen_state = screen_sleep("off")
screen = pygame.display.set_mode((screen_width, screen_height), FULLSCREEN)
splash_screen()
os.makedirs(cache_path, exist_ok=True)
client = Connect_IMAP()
messages = GetMessages(client)
thread = threading.Thread(target=PollNewMessages, args = (client,))
thread.start()
pause_event.set()
i=0

# Main loop
while True:
    if i < len(messages):
        msgid = messages[i]
        i += 1
        current_image_index = 0
        SleepOrWake(client, screen_state)
        walk_message(client, msgid, current_image_index, messages, c)
    else:
        i = 0
